using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PyramidRaiderLevelEditor.Solver
{
    public class StaticState
    {
        private short[][] staticMaze;
        // 111111 last four digits: up, right, down, left
        // first two digits: key, traps
        private MummyWhite[] mummyWhite;
        private MummyRed[] mummyRed;
        private ScorpionWhite[] sk;
        private ScorpionRed[] skRed;
        private Keyd[] key;
        private Human human;

        public StaticState(State state)
        {
            this.staticMaze = createStaticMaze(state.getMaze());
            this.mummyWhite = state.getMummyWhite();
            this.mummyRed = state.getMummyRed();
            this.sk = state.getSk();
            this.skRed = state.getSkRed();
            this.key = state.getKey();
            this.human = state.getHuman();
        }

        protected static short[][] createStaticMaze(short[][][] maze) {
            short[][] tam = new short[maze.Length][];
            for(int i = 0; i < tam.Length; i++) {
                tam[i] = new short[maze[0].Length];
            }
            for (int i = 0; i < maze.Length; i++) {
                for (int j = 0; j < maze[0].Length; j++) {
                    tam[i][j] = maze[i][j][0];
                }
            }
            return tam;
        }

        private bool equals(StaticState statics)
        {

            for (int i = 0; i < this.getStaticMaze().Length; i++)
            {
                for (int j = 0; j < this.getStaticMaze()[0].Length; j++)
                {
                    if (!(this.getStaticMaze()[i][j] == (statics.getStaticMaze()[i][j])))
                    {
                        return false;
                    }
                }
            }

            if (this.getMummyWhite().Length != statics.getMummyWhite().Length)
            {
                return false;
            }
            else
            {
                for (int i = 0; i < this.getMummyWhite().Length; i++)
                {
                    if (!(this.getMummyWhite()[i].samePlace(statics.getMummyWhite()[i])))
                    {
                        return false;
                    }
                }
            }

            if (this.getMummyRed().Length != statics.getMummyRed().Length)
            {
                return false;
            }
            else
            {
                for (int i = 0; i < this.getMummyRed().Length; i++)
                {
                    if (!(this.getMummyRed()[i].samePlace(statics.getMummyRed()[i])))
                    {
                        return false;
                    }
                }
            }

            if (this.getSk().Length != statics.getSk().Length)
            {
                return false;
            }
            else
            {
                for (int i = 0; i < this.getSk().Length; i++)
                {
                    if (!(this.getSk()[i].samePlace(statics.getSk()[i])))
                    {
                        return false;
                    }
                }
            }

            if (this.getSkRed().Length != statics.getSkRed().Length)
            {
                return false;
            }
            else
            {
                for (int i = 0; i < this.getSkRed().Length; i++)
                {
                    if (!(this.getSkRed()[i].samePlace(statics.getSkRed()[i])))
                    {
                        return false;
                    }
                }
            }

            if (!(this.getHuman().samePlace(statics.getHuman())))
            {
                return false;
            }
            return true;
        }

        public bool existing()
        {
            for (int i = 0; i < MainProcess.getExistedState().Count; i++)
            {
                if (this.equals(MainProcess.getExistedState()[i]))
                {
                    return true;
                }
            }
            return false;
        }

        //Setter and Getter Autogenerated
        public short[][] getStaticMaze()
        {
            return staticMaze;
        }

        public MummyWhite[] getMummyWhite()
        {
            return mummyWhite;
        }

        public MummyRed[] getMummyRed()
        {
            return mummyRed;
        }

        public ScorpionWhite[] getSk()
        {
            return sk;
        }

        public Human getHuman()
        {
            return human;
        }

        public void setStaticMaze(short[][] staticMaze)
        {
            this.staticMaze = staticMaze;
        }

        public void setMummyWhite(MummyWhite[] mummyWhite)
        {
            this.mummyWhite = mummyWhite;
        }

        public void setMummyRed(MummyRed[] mummyRed)
        {
            this.mummyRed = mummyRed;
        }

        public void setSk(ScorpionWhite[] sk)
        {
            this.sk = sk;
        }

        public void setHuman(Human human)
        {
            this.human = human;
        }

        public Keyd[] getKey()
        {
            return key;
        }

        public void setKey(Keyd[] key)
        {
            this.key = key;
        }

        public ScorpionRed[] getSkRed()
        {
            return skRed;
        }

        public void setSkRed(ScorpionRed[] skRed)
        {
            this.skRed = skRed;
        }
    }
}
